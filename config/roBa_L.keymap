#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define DEFAULT_WIN 0
#define DEFAULT_MAC 1
#define NUM_WIN 2
#define NUM_MAC 3
#define SYMBOL_WIN 4
#define SYMBOL_MAC 5
#define FUNC_SCROLL_WIN 6
#define FUNC_SCROLL_MAC 7
#define AML 8
#define KBD_SETTING 9

// ロータリーエンコーダー: スクロール量変更の定義を追記

#define ZMK_POINTING_DEFAULT_SCRL_VAL 120

&mt {
    flavor = "balanced";
    tapping-term-ms = <180>;
    quick-tap-ms = <180>;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <180>;
    quick-tap-ms = <180>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        Esc {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        left_click {
            bindings = <&mkp MB1>;
            key-positions = <18 19>;
        };

        right_click {
            bindings = <&mkp MB2>;
            key-positions = <19 20>;
        };

        middle_click {
            bindings = <&mkp MB3>;
            key-positions = <18 20>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <8 9>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        bt0_win: bt0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&tog_off 1>,
                <&macro_wait_time 200>,
                <&bt BT_SEL 0 &bt BT_DISC 1 &bt BT_DISC 2 &bt BT_DISC 3 &bt BT_DISC 4>;

            label = "BT0";
        };

        bt1_mac: bt1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&tog_off 1>,
                <&macro_wait_time 200>,
                <&bt BT_SEL 1 &bt BT_DISC 0 &bt BT_DISC 2 &bt BT_DISC 3 &bt BT_DISC 4>,
                <&macro_wait_time 500>,
                <&tog_on 1>;

            label = "BT1";
        };

        bt2_iPad: bt2_iPad {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&tog_off 1>,
                <&macro_wait_time 200>,
                <&bt BT_SEL 2 &bt BT_DISC 0 &bt BT_DISC 1 &bt BT_DISC 3 &bt BT_DISC 4>,
                <&macro_wait_time 500>,
                <&tog_on 1>;

            label = "BT2_IPAD";
        };

        bt3_iPhone: bt3_iPhone {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&tog_off 1>,
                <&macro_wait_time 200>,
                <&bt BT_SEL 3 &bt BT_DISC 0 &bt BT_DISC 1 &bt BT_DISC 2 &bt BT_DISC 4>,
                <&macro_wait_time 500>,
                <&tog_on 1>;

            label = "BT3_IPHONE";
        };

        // AML起動中にスクロールレイヤに入るためのマクロ(zaruSaruさん実装)

        to_scroll_layer_win: to_scroll_layer_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&to FUNC_SCROLL_WIN>,
                <&macro_press>,
                <&mo FUNC_SCROLL_WIN>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo FUNC_SCROLL_WIN>;

            label = "TO_SCROLL_LAYER_WIN";
        };

        to_scroll_layer_mac: to_scroll_layer_mac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&to FUNC_SCROLL_MAC>,
                <&macro_press>,
                <&mo FUNC_SCROLL_MAC>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo FUNC_SCROLL_MAC>;

            label = "TO_SCROLL_LAYER_MAC";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        // ロータリーエンコーダーでスクロールする設定
        // スクロール方向を逆にしたい場合は <&msc SCRL_DOWN> と <&msc SCRL_UP> を入れ替え
        // 使い方: 設定したいレイヤーに sensor-bindings = <&encoder_msc_down_up>; を追記
        // mac用

        encoder_msc_down_up: encoder_msc_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_DOWN_UP";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
        };

        //
        // windows用

        encoder_msc_up_down: encoder_msc_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_UP_DOWN";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <20>;
        };

        // Ctrl+スクロール (Windows用)

        encoder_msc_ctrl_up_down: encoder_msc_ctrl_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_CTRL_UP_DOWN";
            #sensor-binding-cells = <0>;
            bindings = <&sk LCTRL &msc SCRL_UP>, <&sk LCTRL &msc SCRL_DOWN>;
        };

        // 接続先に応じてデフォルトレイヤーを変更するための動作
        // zmk studioで接続先ごとにマクロ設定する。

        tog_on: toggle_layer_on_only {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer On";
            toggle-mode = "on";
        };

        tog_off: toggle_layer_off_only {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer Off";
            toggle-mode = "off";
        };

        // リピート付きのSpace and Shift

        sands: space_and_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "SPACE_AND_SHIFT";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <220>;
            quick-tap-ms = <125>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        mtandkp: mt_and_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_AND_KP";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <220>;
            quick-tap-ms = <125>;
            global-quick-tap;
            bindings = <&mt>, <&kp>;
        };

        ltandkp: lt_and_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_AND_KP";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <220>;
            quick-tap-ms = <125>;
            global-quick-tap;
            bindings = <&lt>, <&kp>;
        };

        // mod morphを使用したエンコーダーの挙動制御
        // Windows用
        // デフォルト: スクロール
        // Shift: Shift+←/→
        // Alt: Win+↑/↓
        // Ctrl: Win+←/→

        shift_p: shift_p {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp 0>, <&kp LG(LEFT)>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT)>;
        };

        shift_default_p: shift_default_p {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&shift_p>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        alt_p: alt_p {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp 0>, <&kp LG(UP)>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        win_p: win_p {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp 0>, <&kp LG(LEFT)>;

            mods = <(MOD_LGUI|MOD_RGUI)>;
        };

        alt_win_p: alt_win_p {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&alt_p>, <&win_p>;

            mods = <(MOD_LGUI|MOD_RGUI)>;
        };

        mod_morph_encoder_p: mod_morph_encoder_p {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&shift_default_p>, <&alt_win_p>;

            mods = <(MOD_LALT|MOD_RALT|MOD_LGUI|MOD_RGUI)>;
        };

        shift_n: shift_n {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp 0>, <&kp LG(RIGHT)>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT)>;
        };

        shift_default_n: shift_default_n {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&shift_n>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        alt_n: alt_n {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp 0>, <&kp LG(DOWN)>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        win_n: win_n {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp 0>, <&kp LG(RIGHT)>;

            mods = <(MOD_LGUI|MOD_RGUI)>;
        };

        alt_win_n: alt_win_n {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&alt_n>, <&win_n>;

            mods = <(MOD_LGUI|MOD_RGUI)>;
        };

        mod_morph_encoder_n: mod_morph_encoder_n {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&shift_default_n>, <&alt_win_n>;

            mods = <(MOD_LALT|MOD_RALT|MOD_LGUI|MOD_RGUI)>;
        };

        mod_morph_encoder: mod_morph_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&mod_morph_encoder_n>, <&mod_morph_encoder_p>;

            tap-ms = <20>;
        };

        // Mac用
        // デフォルト: スクロール
        // GUI: command + +/-
        // Shift: Shift+←/→
        // Alt: Win+↑/↓
        // Ctrl: Win+←/→

        // positive: 手前
        gui_p: gui_p {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp 0>, <&kp LG(MINUS)>;

            mods = <(MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        gui_default_p: gui_default_p {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&gui_p>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ctrl_p: ctrl_p {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp 0>, <&kp LG(LEFT)>;
            mods = <(MOD_LCTRL|MOD_RCTRL)>;
            keep-mods = <(MOD_LALT)>;
        };

        opt_p: opt_p {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp 0>, <&kp LG(UP)>;

            mods = <(MOD_LALT|MOD_RALT)>;
            keep-mods = <(MOD_LALT)>;
        };

        opt_ctrl_p: opt_ctrl_p {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&ctrl_p>, <&opt_p>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        mod_morph_encoder_mac_p: mod_morph_encoder_mac_p {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&gui_default_p>, <&opt_ctrl_p>;

            mods = <(MOD_LALT|MOD_RALT|MOD_LCTRL|MOD_RCTRL)>;
        };

        // negative: 奥
        gui_n: gui_n {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp 0>, <&kp LG(PLUS)>;

            mods = <(MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        gui_default_n: gui_default_n {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&gui_n>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ctrl_n: ctrl_n {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp 0>, <&kp LG(RIGHT)>;

            mods = <(MOD_LCTRL|MOD_RCTRL)>;
            keep-mods = <(MOD_LALT)>;
        };

        opt_n: opt_n {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp 0>, <&kp LG(DOWN)>;

            mods = <(MOD_LALT|MOD_RALT)>;
            keep-mods = <(MOD_LALT)>;
        };

        opt_ctrl_n: opt_ctrl_n {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&ctrl_n>, <&opt_n>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        mod_morph_encoder_mac_n: mod_morph_encoder_mac_n {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&gui_default_n>, <&opt_ctrl_n>;

            mods = <(MOD_LALT|MOD_RALT|MOD_LCTRL|MOD_RCTRL)>;
        };

        mod_morph_encoder_mac: mod_morph_encoder_mac{
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&mod_morph_encoder_mac_n>, <&mod_morph_encoder_mac_p>;

            tap-ms = <20>;
        }
    };

    keymap {
        compatible = "zmk,keymap";

        DEFAULT_WIN {
            bindings = <
&kp Q             &kp W        &kp E                &kp R         &kp T                                                              &kp Y            &kp U    &lt 0 I    &kp O           &kp P
&kp A             &kp S        &lt 4 D              &lt 2 F       &kp G             &kp LC(N0)                &kp ESCAPE             &kp H            &lt 2 J  &lt 4 K    &mt LEFT_ALT L  &mt LCTRL MINUS
&mt LEFT_SHIFT Z  &kp X        &kp C                &kp V         &kp B             &kp LEFT_PARENTHESIS      &kp RIGHT_PARENTHESIS  &kp N            &kp M    &kp COMMA  &kp DOT         &mt LEFT_SHIFT SLASH
&lt 2 LANGUAGE_2  &kp LS(F10)  &mt LEFT_WIN ESCAPE  &kp LEFT_ALT  &mt LCTRL DELETE  &mt LEFT_SHIFT SPACE      &lt 2 ENTER            &lt 4 BACKSPACE                                      &lt 6 LANGUAGE_1
            >;

            sensor-bindings = <&mod_morph_encoder>;
        };

        DEFAULT_MAC {
            bindings = <
&kp Q             &kp W                 &kp E                    &kp R         &kp T                                                                     &kp Y            &kp U    &lt 0 I    &kp O           &kp P
&kp A             &kp S                 &lt 5 D                  &lt 3 F       &kp G                    &kp LG(KP_NUMBER_0)       &kp ESCAPE             &kp H            &lt 3 J  &lt 5 K    &mt LEFT_ALT L  &mt LEFT_COMMAND MINUS
&mt LEFT_SHIFT Z  &kp X                 &kp C                    &kp V         &kp B                    &kp LEFT_PARENTHESIS      &kp RIGHT_PARENTHESIS  &kp N            &kp M    &kp COMMA  &kp DOT         &mt LEFT_SHIFT SLASH
&lt 3 LANGUAGE_2  &kp LC(LEFT_COMMAND)  &mt LEFT_CONTROL ESCAPE  &kp LEFT_ALT  &mt LEFT_COMMAND DELETE  &mt LEFT_SHIFT SPACE      &lt 3 ENTER            &lt 5 BACKSPACE                                      &lt 7 LANGUAGE_1
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        NUM_WIN {
            bindings = <
&kp KP_DIVIDE  &kp N7  &kp N8            &kp N9            &kp KP_MULTIPLY                                            &kp ESCAPE  &none          &none        &none      &kp LA(PRINTSCREEN)
&kp KP_MINUS   &kp N4  &kp N5            &kp N6            &kp KP_PLUS           &trans             &kp ESCAPE        &kp LEFT    &kp DOWN       &kp UP       &kp RIGHT  &trans
&kp N0         &kp N1  &kp N2            &kp N3            &kp PERIOD            &kp LESS_THAN      &kp GREATER_THAN  &kp HOME    &kp PAGE_DOWN  &kp PAGE_UP  &kp END    &trans
&mo 9          &trans  &kp LS(LEFT_WIN)  &kp LS(LEFT_ALT)  &kp LS(LEFT_CONTROL)  &trans             &trans            &trans                                             &mo 9
            >;

            sensor-bindings = <&mod_morph_encoder>;
        };

        NUM_MAC {
            bindings = <
&kp KP_DIVIDE  &kp N7                  &kp N8                &kp N9            &kp KP_MULTIPLY                                        &kp ESCAPE    &none         &none       &none          &kp LS(LG(NUMBER_4))
&kp KP_MINUS   &kp N4                  &kp N5                &kp N6            &kp KP_PLUS       &trans             &kp ESCAPE        &kp LEFT      &kp DOWN      &kp UP      &kp RIGHT      &trans
&kp N0         &kp N1                  &kp N2                &kp N3            &kp PERIOD        &kp LESS_THAN      &kp GREATER_THAN  &kp LG(LEFT)  &kp LG(DOWN)  &kp LG(UP)  &kp LG(RIGHT)  &trans
&mo 9          &kp LC(LG(LEFT_SHIFT))  &kp LS(LEFT_CONTROL)  &kp LS(LEFT_ALT)  &kp LS(LEFT_GUI)  &trans             &trans            &trans                                                 &mo 9
            >;

            sensor-bindings = <&inc_dec_kp LEFT RIGHT>;
        };

        SYMBOL_WIN {
            bindings = <
&kp SQT      &kp DOUBLE_QUOTES  &kp EXCLAMATION   &kp QUESTION      &kp TILDE                                              &kp BACKSLASH  &kp LEFT_BRACE        &kp RIGHT_BRACE        &trans    &kp PERCENT
&kp AT_SIGN  &kp SEMICOLON      &kp DOLLAR        &kp LESS_THAN     &kp GREATER_THAN  &trans              &kp ESCAPE       &kp HASH       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PIPE  &kp EQUAL
&trans       &kp ASTERISK       &kp COLON         &kp CARET         &kp GRAVE         &kp LEFT_BRACE      &kp RIGHT_BRACE  &kp AMPERSAND  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &trans    &kp SLASH
&trans       &trans             &kp LS(LEFT_GUI)  &kp LS(LEFT_ALT)  &kp LS(LCTRL)     &trans              &trans           &trans                                                                &trans
            >;

            sensor-bindings = <&mod_morph_encoder>;
        };

        SYMBOL_MAC {
            bindings = <
&kp SQT      &kp DOUBLE_QUOTES  &kp EXCLAMATION  &kp QUESTION      &kp TILDE                                              &kp BACKSLASH  &kp LEFT_BRACE        &kp RIGHT_BRACE        &trans    &kp PERCENT
&kp AT_SIGN  &kp SEMICOLON      &kp DOLLAR       &kp LESS_THAN     &kp GREATER_THAN  &trans              &kp ESCAPE       &kp HASH       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PIPE  &kp EQUAL
&trans       &kp ASTERISK       &kp COLON        &kp CARET         &kp GRAVE         &kp LEFT_BRACE      &kp RIGHT_BRACE  &kp AMPERSAND  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &trans    &kp SLASH
&trans       &trans             &kp LS(LCTRL)    &kp LS(LEFT_ALT)  &kp LS(LEFT_GUI)  &trans              &trans           &trans                                                                &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_DOWN C_VOLUME_UP>;
        };

        FUNC_SCROLL_WIN {
            bindings = <
&kp F12  &kp F7      &kp F8  &kp F9  &trans                                           &none         &kp LC(PAGE_UP)  &kp LC(PAGE_DOWN)  &none          &kp LS(LG(S))
&kp F11  &kp F4      &kp F5  &kp F6  &trans  &trans                &kp ESCAPE         &kp LA(LEFT)  &kp LS(LC(TAB))  &kp LC(TAB)        &kp LA(RIGHT)  &trans
&kp F10  &kp LC(F1)  &kp F2  &kp F3  &trans  &kp LEFT_BRACKET      &kp RIGHT_BRACKET  &trans        &trans           &trans             &trans         &trans
&trans   &trans      &trans  &trans  &trans  &trans                &trans             &trans                                                           &trans
            >;

            sensor-bindings = <&mod_morph_encoder>;
        };

        FUNC_SCROLL_MAC {
            bindings = <
&kp F12  &kp F7      &kp F8  &kp F9  &trans                                           &none         &kp LG(PAGE_UP)  &kp LG(PAGE_DOWN)  &none          &kp LS(LG(NUMBER_4))
&kp F11  &kp F4      &kp F5  &kp F6  &trans  &trans                &kp ESCAPE         &kp LG(LEFT)  &kp LS(LC(TAB))  &kp LC(TAB)        &kp LG(RIGHT)  &trans
&kp F10  &kp LG(F1)  &kp F2  &kp F3  &trans  &kp LEFT_BRACKET      &kp RIGHT_BRACKET  &trans        &trans           &trans             &trans         &trans
&trans   &trans      &trans  &trans  &trans  &trans                &trans             &trans                                                           &trans
            >;

            sensor-bindings = <&inc_dec_kp LG(PLUS) LG(MINUS)>;
        };

        AML {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB2  &mkp MB3  &to_scroll_layer_mac
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &to_scroll_layer_win
            >;
        };

        KBD_SETTING {
            bindings = <
&trans          &trans  &trans  &trans  &trans                                &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp K_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP
&trans          &trans  &trans  &trans  &trans  &bootloader      &bootloader  &bt0_win              &bt1_mac              &bt2_iPad   &bt3_iPhone        &bt BT_SEL 4
&bt BT_CLR_ALL  &trans  &trans  &trans  &trans  &trans           &trans       &trans                &trans                &trans      &trans             &bt BT_CLR
&trans          &trans  &trans  &trans  &trans  &trans           &trans       &trans                                                                     &trans
            >;
        };
    };
};
